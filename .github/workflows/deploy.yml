name: Create Image and Push to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  check_secrets:
    runs-on: ubuntu-latest

    steps:
      - name: Check required secrets
        run: |
          if [[ -z "${{ secrets.EXPOSED_PORT }}" ]]; then
            echo "❌ Missing required secret: EXPOSED_PORT"
            exit 1
          fi
          if [[ -z "${{ secrets.INTERNAL_PORT }}" ]]; then
            echo "❌ Missing required secret: INTERNAL_PORT"
            exit 1
          fi
          if [[ -z "${{ secrets.DOCKER_REPO }}" ]]; then
            echo "❌ Missing required secret: DOCKER_REPO"
            exit 1
          fi
          if [[ -z "${{ secrets.SERVER_IP }}" ]]; then
            echo "❌ Missing required secret: SERVER_IP"
            exit 1
          fi
          if [[ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]]; then
            echo "❌ Missing required secret: SSH_PRIVATE_KEY"
            exit 1
          fi
          if [[ -z "${{ secrets.DOCKER_USERNAME }}" ]]; then
            echo "❌ Missing required secret: DOCKER_USERNAME"
            exit 1
          fi
          if [[ -z "${{ secrets.DOCKER_PASSWORD }}" ]]; then
            echo "❌ Missing required secret: DOCKER_PASSWORD"
            exit 1
          fi
          echo "✅ All required secrets are present!"

  set_vals:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.image_name.outputs.image }}
    steps:
    - name: Image Name
      id: image_name
      run: |
        echo "Checking values..."
        
        REF="${{ github.ref }}"
        echo "REF: $REF"

        TAG_NAME="${REF##*/}"
        echo "TAG_NAME: $TAG_NAME"

        REPO_NAME="${{ github.event.repository.name }}"
        echo "REPO_NAME: $REPO_NAME"

        LOWER_REPO_NAME=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
        echo "LOWER_REPO_NAME: $LOWER_REPO_NAME"

        IMAGE_NAME="${{ secrets.DOCKER_REPO }}/${LOWER_REPO_NAME}:${TAG_NAME}"
        echo "IMAGE_NAME: $IMAGE_NAME"

        echo "image=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"
  build:
    runs-on: ubuntu-latest
    needs: [check_secrets, set_vals]

    steps:
      - name: Debug Outputs
        run: |
          echo "Available outputs from set_vals: ${{ toJSON(needs.set_vals.outputs) }}"
      
      - name: Use Image Name
        run: echo "Image name is ${{ needs.set_vals.outputs.image_name }}"
      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t "${{ needs.set_vals.outputs.image_name }}" .


      - name: Push Docker image to Docker Hub
        run: |
          docker push "${{ needs.set_vals.outputs.image_name }}"

  deploy:
    runs-on: ubuntu-latest
    needs: [build, check_secrets, set_vals]

    steps: 
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: SSH to server and deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_IP }}
          username: matejv
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            CONTAINER_NAME="$(basename "${{ github.repository }}")"
            EXPOSED_PORT="${{ secrets.EXPOSED_PORT }}"
            INTERNAL_PORT="${{ secrets.INTERNAL_PORT }}"

            echo "Pulling Docker image: $IMAGE_NAME"
            docker pull "${{ needs.set_vals.outputs.image_name }}"

            echo "Checking if container $CONTAINER_NAME exists..."
            if [ "$(docker ps -aq -f name=^${CONTAINER_NAME}$)" ]; then
              echo "Stopping and removing existing container..."
              docker stop "$CONTAINER_NAME"
              docker rm "$CONTAINER_NAME"
            else
              echo "No existing container found. Skipping stop and remove."
            fi

            echo "Extracting APP_ environment variables..."
            ENV_VARS=$(printenv | grep '^APP_' | awk '{print "-e " $1}')

            echo "Running new container..."
            docker run -d \
              --restart unless-stopped \
              -p "$EXPOSED_PORT:$INTERNAL_PORT" \
              --name "$CONTAINER_NAME" \
              $ENV_VARS \
              "${{ needs.set_vals.outputs.image_name }}"

